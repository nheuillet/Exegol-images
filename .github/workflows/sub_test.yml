name: (level 2 sub) Test

on:
  workflow_call:
    inputs:
      DOCKER_BUILD_REPO:
        required: true
        type: string
      IMAGE_BASE_NAME:
        required: true
        type: string
      ARCH:
        required: true
        type: string

jobs:
  test:
    name: Tests (${{ inputs.ARCH }})
    runs-on:
      - self-hosted
      - tester
      - ${{ inputs.ARCH }}
    steps:
      - name: Create a container from the built image
        id: create
        run: |
          docker inspect ${{ inputs.DOCKER_BUILD_REPO }}:${{ inputs.IMAGE_BASE_NAME }}-${{ inputs.ARCH }}
          echo "container_id=$(docker run --rm -t -d ${{ inputs.DOCKER_BUILD_REPO }}:${{ inputs.IMAGE_BASE_NAME }}-${{ inputs.ARCH }} endless)" >> $GITHUB_OUTPUT
      - name: Run the tests
        env:
          ID: ${{ steps.create.outputs.container_id }}
        if: ${{ success() && steps.create.outputs.container_id != '' }}
        run: |
          docker exec $ID zsh -c 'cat /.exegol/build_pipeline_tests/all_commands.txt | grep -vE "^\s*$" | sort -u > /.exegol/build_pipeline_tests/all_commands.sorted.txt'
          line_count=$(docker exec $ID zsh -c 'wc -l /.exegol/build_pipeline_tests/all_commands.sorted.txt | cut -d " " -f 1')
          echo "$line_count test commands found!"
          docker exec $ID python3 /.exegol/build_pipeline_tests/run_tests.py
      - name: Print the failed tests if any
        env:
          ID: ${{ steps.create.outputs.container_id }}
        if: ${{ failure() && steps.create.outputs.container_id != '' }}
        run: |
          docker exec $ID cat /.exegol/build_pipeline_tests/failed_commands.log
      - name: Print the successful tests
        env:
          ID: ${{ steps.create.outputs.container_id }}
        if: ${{ always() && steps.create.outputs.container_id != '' }}
        run: |
          docker exec $ID cat /.exegol/build_pipeline_tests/success_commands.log
      - name: Stop the container
        if: ${{ always() && steps.create.outputs.container_id != '' }}
        env:
          ID: ${{ steps.create.outputs.container_id }}
        run: docker stop $ID
